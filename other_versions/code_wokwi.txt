#include <Arduino.h>
#include <EncButton.h>
#include <LiquidCrystal_I2C.h>
#include <TimerOne.h>
#include <EEPROM.h>

enum
{
  ccw,
  cw
};

enum
{
  set_mode,
  loaded_mode,
  work_mode,
  pause_mode
};

#define START_BTN_PIN 8 // Пин для кнопки START
#define MENU_ENC_PIN 6  // Пин для кнопки ENC
#define ENCA_PIN 5      // Пин ENCA
#define ENCB_PIN 4      // Пин ENCB

#define EN_STEPPER_PIN 7         // Пин для включения шагового двигателя
#define STEP_PIN 2               // Пин шага
#define DIR_PIN 3                // Пин направления
#define STEPS_PER_REV 200 * 16   // 3200 шагов/оборот (для микрошага 1/16)
#define MIN_SPEED 0.1            // Минимальная скорость в об/мин
#define MAX_SPEED 6.0            // Максимальная скорость в об/мин
#define MAX_TIME_H 99999       // Максимальное время в часах
#define MOTOR_TAKE_ON_STOP false // Удерживание мотора при STOP
#define MOTOR_TAKE_ON_PAUSE true // Удерживание мотора при PAUSE
#define MOTOR_DIRECTION cw       // Направление вращения по часовой стрелке
#define DEB_TIMEOUT 100          // Таймаут дебаунса в миллисекундах

uint8_t displayMode = loaded_mode;         // Начальный режим отображения
uint8_t timerTime1s = 0, tmH = 0, tmM = 0; // Таймерные переменные пройденного времени
float speedRpm = MIN_SPEED;                // Текущая/начальная скорость (об/мин)
uint32_t stepDelayUs = 0;                  // Задержка между шагами в микросекундах
volatile uint32_t accumulator = 0;         // Используется для обработки прерываний для секундного таймера
bool updDisplayFlag = false;

EncButton eb(ENCA_PIN, ENCB_PIN, MENU_ENC_PIN);
Button sb(START_BTN_PIN);
LiquidCrystal_I2C lcd(0x27, 20, 4);

void DisplayIntro();
void Handle_Eb();
void Handle_Sb();
void UpdateLcdDisplay();
void updateDisplayHandle();
void UpdateFrase(uint8_t posY, String frase);
void RiseTimer_1s();
void SetMotorIsrDelay();
void MakeStep();
void MakeISR();
void CheckInputLimits(float inpSpeed);
void SetMotorFreeze(bool freeze);
void DisplaySerialDebugData();
void SaveEEPROM();
void LoadEEPROM();

void setup()
{
  Serial.begin(115200);
  Serial.println();

  EEPROM.begin();
  delay(10);

  LoadEEPROM();

  while (isnan(speedRpm)) // проверяем наличие данных в EEPROM (первый запуск)
  {
    speedRpm = 1.0;

    SaveEEPROM();
  }

  lcd.init();
  lcd.backlight();

  pinMode(STEP_PIN, OUTPUT);
  pinMode(DIR_PIN, OUTPUT);
  pinMode(EN_STEPPER_PIN, OUTPUT);
  pinMode(LED_BUILTIN, OUTPUT);

  // SetMotorFreeze(MOTOR_FREEZE_ON_STOP);

  digitalWrite(DIR_PIN, MOTOR_DIRECTION); // Направление вращения мотора

  eb.setDebTimeout(DEB_TIMEOUT);
  sb.setDebTimeout(DEB_TIMEOUT);

  // DisplayIntro();

  SetMotorIsrDelay(); // Калькуляция задержки шага

  Serial.println();
  Serial.println("Welcome");

  DisplaySerialDebugData();

  updDisplayFlag = true;
}

void loop()
{
  updateDisplayHandle();

  eb.tick();
  sb.tick();

  Handle_Eb();
  Handle_Sb();
}

void Handle_Eb()
{
  if (eb.turn())
  {
    if (displayMode != set_mode) // игнорируем если не в режиме настройки
      return;

    if (eb.dir() > 0)
      eb.fast() ? speedRpm += 1.0 : speedRpm += 0.1;
    else if (eb.dir() < 0)
      eb.fast() ? speedRpm -= 1.0 : speedRpm -= 0.1;

    CheckInputLimits(speedRpm);
  }

  if (eb.click())
  {
    if (displayMode == work_mode || displayMode == pause_mode) // игнорируем в режиме работы и паузы
      return;

    if (displayMode == set_mode)
    {
      displayMode = loaded_mode;

      Serial.println("Enter loaded mode");
    }
    else if (displayMode == loaded_mode)
    {
      displayMode = set_mode;

      Serial.println("Enter setup mode");
    }

    lcd.clear();

    updDisplayFlag = true;
  }
}

void Handle_Sb()
{
  if (displayMode == set_mode) // игнорируем в режиме настройки
    return;

  if (sb.click())
  {
    if (displayMode == pause_mode) // игнорируем в режиме паузы
      return;

    if (displayMode == loaded_mode)
    {
      SaveEEPROM();

      SetMotorFreeze(true); // включаем мотор для работы

      Timer1.restart();

      displayMode = work_mode;

      Serial.println("Enter work mode");
    }
    else if (displayMode == work_mode)
    {
      Timer1.stop();

      SetMotorFreeze(MOTOR_TAKE_ON_STOP); // переводим мотор в выбрвееый режим во режим остановки

      displayMode = loaded_mode;

      Serial.println("Enter loaded mode");
    }

    timerTime1s = 0;
    tmH = 0;
    tmM = 0;

    lcd.clear();

    updDisplayFlag = true;
  }
  else if (sb.hold())
  {
    if (displayMode == set_mode || displayMode == loaded_mode) // игнорируем в режиме настройки и загрузки
      return;

    if (displayMode == work_mode)
    {
      Timer1.stop();

      SetMotorFreeze(MOTOR_TAKE_ON_PAUSE); // переводим мотор в выбрвееый режим во время паузы

      displayMode = pause_mode;

      Serial.println("Enter pause mode");
    }
    else if (displayMode == pause_mode)
    {
      SetMotorFreeze(true); // включаем мотор для продолжения работы

      Timer1.resume();

      displayMode = work_mode;

      Serial.println("Enter work mode");
    }

    lcd.clear();

    updDisplayFlag = true;
  }
}

void CheckInputLimits(float inpSpeed)
{

  if (inpSpeed < MIN_SPEED)
  {
    Serial.println("Corrected to min: out of range from 0.1 to 6.0 rpm");

    inpSpeed = MIN_SPEED;
  }
  else if (inpSpeed > MAX_SPEED)
  {
    Serial.println("Corrected to max: out of range from 0.1 to 6.0 rpm");

    inpSpeed = MAX_SPEED;
  }

  speedRpm = inpSpeed;

  SetMotorIsrDelay();
  DisplaySerialDebugData();

  updDisplayFlag = true;
}

void SetMotorIsrDelay()
{
  stepDelayUs = (uint32_t)(60000000.0 / (speedRpm * STEPS_PER_REV));

  Timer1.initialize(stepDelayUs);   // Инициализация таймера в микросекундах
  Timer1.attachInterrupt(MakeStep); // Привязываем функцию к таймеру
  Timer1.stop();
}

void MakeStep()
{
  digitalWrite(STEP_PIN, HIGH);
  delayMicroseconds(1);
  digitalWrite(STEP_PIN, LOW);

  MakeISR();
}

void MakeISR()
{
  accumulator += stepDelayUs;

  if (accumulator >= 1000000)
  {
    digitalWrite(LED_BUILTIN, !digitalRead(LED_BUILTIN));
    RiseTimer_1s();

    accumulator -= 1000000;
  }
}

void RiseTimer_1s()
{
  timerTime1s++;
  updDisplayFlag = true;
}

void SetMotorFreeze(bool freeze)
{
  if (freeze)
    digitalWrite(EN_STEPPER_PIN, LOW);
  else
    digitalWrite(EN_STEPPER_PIN, HIGH);
}

void DisplaySerialDebugData()
{
  Serial.println("Debug data:");
  Serial.print("Step delay: ");
  Serial.print(stepDelayUs);
  Serial.println(" us");
  Serial.print("Speed set to: ");
  Serial.print(speedRpm);
  Serial.println(" rpm");
}

void updateDisplayHandle()
{
  if (updDisplayFlag)
  {
    updDisplayFlag = false;

    UpdateLcdDisplay();
  }
}

void UpdateLcdDisplay()
{
  switch (displayMode)
  {
    case set_mode:
      UpdateFrase(0, "Set RPM:");
      UpdateFrase(2, "New RPM:>" + (String)speedRpm + "<");
      UpdateFrase(3, "Press ENC to LOAD");

      break;
    case loaded_mode:
      UpdateFrase(0, "Param RPM: " + (String)speedRpm);
      UpdateFrase(1, "is LOADED");
      UpdateFrase(2, "Press ENC to SETUP");
      UpdateFrase(3, "Press BTN to START");

      break;
    case work_mode:
      if (timerTime1s >= 60) // переводим во время
      {
        tmM++;

        if (tmM >= 60)
        {
          tmH++;

          if (tmH >= MAX_TIME_H)
            tmH = 0;
        }

        lcd.clear();
        timerTime1s = 0;
      }

      UpdateFrase(0, "WORK Tm: " + (String)tmH + ":" + (String)tmM + ":" + (String)timerTime1s);
      UpdateFrase(1, "RPM = " + (String)speedRpm);
      UpdateFrase(2, "Hold BTN to PAUSE");
      UpdateFrase(3, "Press BTN to STOP");

      break;
    case pause_mode:
      UpdateFrase(0, "PAUSE");
      UpdateFrase(1, "RPM = " + (String)speedRpm);

      UpdateFrase(2, "Time = " + (String)tmH + ":" + (String)tmM + ":" + (String)timerTime1s);
      UpdateFrase(3, "Hold BTN to RESUME");

      break;
  }
}

void UpdateFrase(uint8_t posY, String frase)
{
  uint8_t middlePosMess = ((19 - frase.length()) / 2) + 1;

  lcd.setCursor(middlePosMess, posY);
  lcd.print(frase);
}

void SaveEEPROM()
{
  EEPROM.put(0, speedRpm);

  delay(10);

  Serial.println("Save EEPROM data: " + (String)speedRpm);
}

void LoadEEPROM()
{
  EEPROM.get(0, speedRpm);

  delay(10);

  Serial.println("Load EEPROM data: " + (String)speedRpm);
}

void DisplayIntro()
{
  lcd.clear();
  UpdateFrase(0, "WELCOME");
  delay(1000);
  UpdateFrase(2, "STEPPER CONTROLLER");
  delay(1000);
  UpdateFrase(3, "v1.0");
  delay(1000);

  lcd.clear();

  UpdateFrase(1, "mail:");
  UpdateFrase(2, "planer.reg@gmail.com");

  delay(2000);

  lcd.clear();
}